/**
 * UnBlock RESTful Web API
 * An blockchain analysis service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { EthFlowRiskGraph } from '../model/eth-flow-risk-graph';
import { EthFlowRiskGraphJob } from '../model/eth-flow-risk-graph-job';
import { EthFlowRiskGraphJobResultPage } from '../model/eth-flow-risk-graph-job-result-page';
import { EthFlowRiskGraphJobStatus } from '../model/eth-flow-risk-graph-job-status';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class EthFlowRiskGraphJobApiService {

    protected basePath = 'http://localhost:45531';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * createFlowRiskGraphJob
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createFlowRiskGraphJobUsingPOSTDefault1(body: EthFlowRiskGraphJob, observe?: 'body', reportProgress?: boolean): Observable<EthFlowRiskGraphJob>;
    public createFlowRiskGraphJobUsingPOSTDefault1(body: EthFlowRiskGraphJob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EthFlowRiskGraphJob>>;
    public createFlowRiskGraphJobUsingPOSTDefault1(body: EthFlowRiskGraphJob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EthFlowRiskGraphJob>>;
    public createFlowRiskGraphJobUsingPOSTDefault1(body: EthFlowRiskGraphJob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createFlowRiskGraphJobUsingPOSTDefault1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EthFlowRiskGraphJob>(`${this.configuration.basePath}/api/eth-flow-risk-graph-job`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFlowRiskGraphJobResult
     * @param id id
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlowRiskGraphJobResultUsingGETDefault1(id: number, page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<EthFlowRiskGraphJobResultPage>;
    public getFlowRiskGraphJobResultUsingGETDefault1(id: number, page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EthFlowRiskGraphJobResultPage>>;
    public getFlowRiskGraphJobResultUsingGETDefault1(id: number, page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EthFlowRiskGraphJobResultPage>>;
    public getFlowRiskGraphJobResultUsingGETDefault1(id: number, page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFlowRiskGraphJobResultUsingGETDefault1.');
        }
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getFlowRiskGraphJobResultUsingGETDefault1.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getFlowRiskGraphJobResultUsingGETDefault1.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<EthFlowRiskGraphJobResultPage>(`${this.configuration.basePath}/api/eth-flow-risk-graph-job/${encodeURIComponent(String(id))}/result`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFlowRiskGraphJobStatus
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlowRiskGraphJobStatusUsingGETDefault1(id: number, observe?: 'body', reportProgress?: boolean): Observable<EthFlowRiskGraphJobStatus>;
    public getFlowRiskGraphJobStatusUsingGETDefault1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EthFlowRiskGraphJobStatus>>;
    public getFlowRiskGraphJobStatusUsingGETDefault1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EthFlowRiskGraphJobStatus>>;
    public getFlowRiskGraphJobStatusUsingGETDefault1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFlowRiskGraphJobStatusUsingGETDefault1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<EthFlowRiskGraphJobStatus>(`${this.configuration.basePath}/api/eth-flow-risk-graph-job/${encodeURIComponent(String(id))}/status`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * nextFlowRiskGraphJobResult
     * @param id id
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nextFlowRiskGraphJobResultUsingGETDefault1(id: number, token?: string, observe?: 'body', reportProgress?: boolean): Observable<EthFlowRiskGraphJobResultPage>;
    public nextFlowRiskGraphJobResultUsingGETDefault1(id: number, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EthFlowRiskGraphJobResultPage>>;
    public nextFlowRiskGraphJobResultUsingGETDefault1(id: number, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EthFlowRiskGraphJobResultPage>>;
    public nextFlowRiskGraphJobResultUsingGETDefault1(id: number, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling nextFlowRiskGraphJobResultUsingGETDefault1.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<EthFlowRiskGraphJobResultPage>(`${this.configuration.basePath}/api/eth-flow-risk-graph-job/${encodeURIComponent(String(id))}/next-page`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * runFlowRiskGraphJob
     * @param page page
     * @param size size
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runFlowRiskGraphJobUsingPOSTDefault1(page: number, size: number, body: EthFlowRiskGraphJob, observe?: 'body', reportProgress?: boolean): Observable<EthFlowRiskGraph>;
    public runFlowRiskGraphJobUsingPOSTDefault1(page: number, size: number, body: EthFlowRiskGraphJob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EthFlowRiskGraph>>;
    public runFlowRiskGraphJobUsingPOSTDefault1(page: number, size: number, body: EthFlowRiskGraphJob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EthFlowRiskGraph>>;
    public runFlowRiskGraphJobUsingPOSTDefault1(page: number, size: number, body: EthFlowRiskGraphJob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling runFlowRiskGraphJobUsingPOSTDefault1.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling runFlowRiskGraphJobUsingPOSTDefault1.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling runFlowRiskGraphJobUsingPOSTDefault1.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EthFlowRiskGraph>(`${this.configuration.basePath}/api/eth-flow-risk-graph-job/run`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
